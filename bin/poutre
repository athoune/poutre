#!/usr/bin/env ruby

require "em-http-request"
require "em-http-metrics"
require "em-http-metrics/csv"
require "optparse"

concurrency = 20
duration = 0.5

optparse = OptionParser.new do |opts|
  opts.on('-c', '--concurrent C', Float, "Concurrents users") do |c|
    concurrency = c
  end
  opts.on('-d', '--duration D', Float, "Duration of the bench") do |d|
    duration = d
  end
end.parse!

url = ARGV[0]
puts "#{concurrency} clients during #{duration * 60} seconds will stress #{url}."

class InfinitFetch

  def initialize url, wait=0
    @url = url
    @cpt = 0
    @running = true
  end

  def fetch
    @cpt += 1
    @http = EventMachine::HttpRequest.new(@url).get
    @http.errback do
      print "#"
      self.fetch if @running
    end
    @http.callback do
      print "." if @cpt % 10 == 1
      self.fetch
    end
    self
  end

  def close
    @running = false
    @http.close
  end

end

m = Metrics::Metrics.new
EM::HttpRequest.use EventMachine::Middleware::Metrics, m

EM.run do
  fetchers = []
  concurrency.to_i.times do
    fetchers << InfinitFetch.new(url).fetch
  end
  EM.add_timer(duration * 60) do
    fetchers.each do |fetcher|
      fetcher.close
    end
    EM.stop
    puts ""
    puts m.to_csv.string
    puts "#{m.length} requests"
    puts "#{m.length / (duration * 60)} query/seconds"
  end
end
