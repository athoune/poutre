#!/usr/bin/env ruby

require "em-http-request"
require "em-http-metrics"
require "em-http-metrics/csv"
require "optparse"

concurrency = 20
duration = 0.5
wait = 0

optparse = OptionParser.new do |opts|
  opts.on('-c', '--concurrent C', Float, "Concurrents users") do |c|
    concurrency = c
  end
  opts.on('-d', '--duration D', Float, "Duration of the bench") do |d|
    duration = d
  end
  opts.on('-w', '--wait W', Float, "Wait time") do |w|
    wait = w
  end
end.parse!

url = ARGV[0]
puts "#{concurrency} clients during #{duration * 60} seconds will stress #{url}."

$errors = 0

class InfinitFetch

  def initialize url, wait=0
    @url = url
    @wait = wait
    @cpt = 0
    @running = true
  end

  def fetch
    @cpt += 1
    @http = EventMachine::HttpRequest.new(@url, :connect_timeout => 30, :inactivity_timeout => 60, :redirects => 1).get
    @http.errback do |http|
      $errors += 1
      print "#"
      EM.add_timer(@wait) do
        self.fetch if @running
      end
    end
    @http.callback do
      print "." if @cpt % 100 == 1
      EM.add_timer(@wait) do
        self.fetch
      end
    end
    self
  end

  def close
    @running = false
    @http.close
  end

end

m = Metrics::Metrics.new
(1..4).each do |frk|
  fork do
    EM::HttpRequest.use EventMachine::Middleware::Metrics, m

    EM.run do
      fetchers = []
      concurrency.to_i.times do
        EM.add_timer(Random.rand(wait)) do
          fetchers << InfinitFetch.new(url, wait).fetch
        end
      end
      EM.add_timer(duration * 60) do
        fetchers.each do |fetcher|
          fetcher.close
        end
        EM.stop
        puts ""
        File.open("poutre_#{frk}.csv", 'w') do |f|
          f.puts m.to_csv.string
        end
        puts "#{m.length} requests"
        puts "#{$errors} errors"
        puts "#{m.length / (duration * 60)} query/seconds"
      end
    end
  end
end
